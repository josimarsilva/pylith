[pylithapp]
# This is not a self-contained simulation configuration file. This
# file only specifies the general parameters common to the simulations
# in this directory.

# dump_parameters.filename = output/SIMULATION-parameters.json
# problem.progress_monitor.filename = output/SIMULATION-progress.txt

# ----------------------------------------------------------------------
# journal
# ----------------------------------------------------------------------
[pylithapp.journal.info]
timedependent = 1
solution = 1
meshio = 1
isotropiclinearelasticity = 1
dirichlettimedependent = 1
faultcohesivekin = 1

# ----------------------------------------------------------------------
# mesh_generator
# ----------------------------------------------------------------------
[pylithapp.mesh_generator]
reader = pylith.meshio.MeshIOCubit
reader.filename = mesh_tri.exo
reader.coordsys.space_dim = 2

# ----------------------------------------------------------------------
# solution
# ----------------------------------------------------------------------
[pylithapp.problem]
solver = nonlinear ; Use nonlinear solver to ensure residual and Jacobian are consistent.

# Set the discretization and integration for each of the solution subfields.
#
# IMPORTANT: The quadrature order *must* the same for all solution and
# auxiliary subfields. PyLith will verify that this requirement is met.
# This requirement may be relaxed in the future.
#
# For a quastistatic simulation with a fault, we have two solution fields:
# (1) displacement and (2) Lagrange multiplier. We use a predefined containter
# to create a solution field with these two subfields.
solution = pylith.problems.SolnDispLagrange

[pylithapp.problem.solution.subfields]
displacement.basis_order = 1
displacement.quadrature_order = 1

lagrange_fault.basis_order = 1
lagrange_fault.quadrature_order = 1

[pylithapp.problem]
solution_observers = [domain, top_boundary, bot_boundary]
solution_observers.top_boundary = pylith.meshio.OutputSolnBoundary
solution_observers.bot_boundary = pylith.meshio.OutputSolnBoundary

[pylithapp.problem.solution_observers.domain]
data_fields = [displacement]
# writer.filename = output/SIMULATION-domain.h5

[pylithapp.problem.solution_observers.top_boundary]
label = face_ypos
data_fields = [displacement]
#writer.filename = output/SIMULATION-boundary_ypos.h5

[pylithapp.problem.solution_observers.bot_boundary]
label = face_yneg
data_fields = [displacement]
#writer.filename = output/SIMULATION-boundary_yneg.h5

# ----------------------------------------------------------------------
# materials
# ----------------------------------------------------------------------
# Create an array of three materials, matching the number of blocks we
# created in CUBIT/Trelis.
[pylithapp.problem]
materials = [elastic_xneg, elastic_xpos]

# We use the default material (elasticity) and rheology
# (isotropic, linearly elastic).

[pylithapp.problem.materials.elastic_xneg]
label = Material to on the -x side of the fault
# id must match the values in the mesh material-ids.
id = 1

# The properties are uniform. We could use a UniformDB, but for illustrative
# purposes, we use a SimpleDB with a single data point (data-dim == 0) to specify uniform values.
db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.label = Elastic properties xneg
db_auxiliary_field.values = [density, vs, vp]
db_auxiliary_field.units = [kg/m**3, km/s, km/s]
db_auxiliary_field.data = [2500.0, 3.00, 5.29]

observers.observer.data_fields = [displacement, cauchy_stress, cauchy_strain]
# observers.observer.writer.filename = output/SIMULATION-elastic_xneg.h5

auxiliary_subfields.density.basis_order = 0
auxiliary_subfields.density.quadrature_order = 1

derived_subfields.cauchy_strain.basis_order = 1
derived_subfields.cauchy_strain.quadrature_order = 1

derived_subfields.cauchy_stress.basis_order = 1
derived_subfields.cauchy_stress.quadrature_order = 1

[pylithapp.problem.materials.elastic_xneg.bulk_rheology]
auxiliary_subfields.bulk_modulus.basis_order = 0
auxiliary_subfields.bulk_modulus.quadrature_order = 1

auxiliary_subfields.shear_modulus.basis_order = 0
auxiliary_subfields.shear_modulus.quadrature_order = 1


[pylithapp.problem.materials.elastic_xpos]
label = Material to on the +x side of the fault
id = 2

db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.label = Elastic properties xpos
db_auxiliary_field.values = [density, vs, vp]
db_auxiliary_field.units = [kg/m**3, km/s, km/s]
db_auxiliary_field.data = [2500.0, 4.24, 5.29]

observers.observer.data_fields = [displacement, cauchy_stress, cauchy_strain]
# observers.observer.writer.filename = output/SIMULATION-elastic_xpos.h5

auxiliary_subfields.density.basis_order = 0
auxiliary_subfields.density.quadrature_order = 1

derived_subfields.cauchy_strain.basis_order = 1
derived_subfields.cauchy_strain.quadrature_order = 1

derived_subfields.cauchy_stress.basis_order = 1
derived_subfields.cauchy_stress.quadrature_order = 1

[pylithapp.problem.materials.elastic_xpos.bulk_rheology]
auxiliary_subfields.bulk_modulus.basis_order = 0
auxiliary_subfields.bulk_modulus.quadrature_order = 1

auxiliary_subfields.shear_modulus.basis_order = 0
auxiliary_subfields.shear_modulus.quadrature_order = 1

# ----------------------------------------------------------------------
# fault
# ----------------------------------------------------------------------
[pylithapp.problem]
interfaces = [fault]

[pylithapp.problem.interfaces.fault]
# The label corresponds to the nodeset we created in CUBIT/Trelis for the fault.
label = fault

# For the fault, we need to specify an id associated with the cohesive cells that is
# different from any of the ids for the materials.
id = 10
observers.observer.data_fields = [slip]
#observers.observer.writer.filename = output/SIMULATION_slip-fault.h5

# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------
[pylithapp.problem]
bc = [x_neg, x_pos]
bc.x_neg = pylith.bc.DirichletTimeDependent
bc.x_pos = pylith.bc.DirichletTimeDependent

[pylithapp.problem.bc.x_pos]
constrained_dof = [0, 1]
label = face_xpos
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.label = Dirichlet BC +x boundary

observers.observer.data_fields = [displacement]
#observers.observer.writer.filename = output/SIMULATION_slip-bc_xpos.h5

[pylithapp.problem.bc.x_neg]
constrained_dof = [0, 1]
label = face_xneg
db_auxiliary_field = pylith.bc.ZeroDB
db_auxiliary_field.label = Dirichlet BC -x boundary

observers.observer.data_fields = [displacement]
#observers.observer.writer.filename = output/SIMULATION_slip-bc_xneg.h5

# ----------------------------------------------------------------------
# PETSc
# ----------------------------------------------------------------------
[pylithapp.petsc]
ts_type = beuler

pc_type = fieldsplit
pc_use_amat = true
pc_fieldsplit_type = schur
pc_fieldsplit_schur_factorization_type = full
pc_fieldsplit_dm_splits = true
fieldsplit_displacement_ksp_type = preonly
fieldsplit_displacement_pc_type = lu
fieldsplit_lagrange_multiplier_fault_pc_type = jacobi
fieldsplit_lagrange_multiplier_fault_ksp_type = gmres
fieldsplit_lagrange_multiplier_fault_ksp_rtol = 1.0e-11
fieldsplit_lagrange_multiplier_fault_ksp_converged_reason = true

ksp_rtol = 1.0e-8
ksp_atol = 1.0e-12
ksp_max_it = 1000
ksp_gmres_restart = 50
ksp_error_if_not_converged = true

snes_rtol = 1.0e-10
snes_atol = 1.0e-10
snes_error_if_not_converged = true

# Monitors for debugging
ts_monitor = true
ksp_monitor = true
ksp_converged_reason = true
snes_monitor = true
snes_converged_reason = true
snes_linesearch_monitor = true

#ksp_view = true
#snes_view = true


# End of file
