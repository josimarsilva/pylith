[pylithapp]

# This is not a self-contained simulation configuration file. This
# file only specifies general parameters for the simulations involving
# postseismic relaxation.

# ----------------------------------------------------------------------
# problem
# ----------------------------------------------------------------------
[pylithapp.timedependent.formulation.time_step]
# We impose the earthquake at 0.0 yrs but start the simulation at a
# time of -100 yrs so that we can see any pre-earthquake trends.
start_time = -100.0*year
total_time = 4100.1*year
dt = 10*year

# ----------------------------------------------------------------------
# faults
# ----------------------------------------------------------------------
[pylithapp.timedependent]
interfaces = [fault]

# Set the type of fault interface condition.
[pylithapp.timedependent.interfaces]
fault = pylith.faults.FaultCohesiveKin

# Set the parameters for the fault interface condition.
[pylithapp.timedependent.interfaces.fault]
# The label corresponds to the name of the nodeset in CUBIT.
label = fault
edge = faultedge

# We must define the quadrature information for fault cells.
# The fault cells are 1D (line).
quadrature.cell = pylith.feassemble.FIATLagrange
quadrature.cell.dimension = 1

# The slip time and final slip are defined in spatial databases.
[pylithapp.timedependent.interfaces.fault.eq_srcs.rupture.slip_function]
slip.iohandler.filename = eqslip.spatialdb
slip.query_type = linear
slip.label = Final slip

# Slip time is uniform, so use UniformDB for convenience
slip_time = spatialdata.spatialdb.UniformDB
slip_time.label = Slip time
slip_time.values = [slip-time]
slip_time.data = [0.0*year]

# ----------------------------------------------------------------------
# output
# ----------------------------------------------------------------------
# Fault
[pylithapp.problem.interfaces.fault.output]
output_freq = time_step
time_step = 19.99999*year
writer = pylith.meshio.DataWriterHDF5

# ----------------------------------------------------------------------
# Solver
# ----------------------------------------------------------------------
[pylithapp.problem.formulation]
# The split_fields flag must be specified, so that the PCFIELDSPLIT
# preconditioner can be used. The matrix_type must be set to aij since
# we lose symmetry when splitting. We have turned on the custom
# preconditioner for the Lagrange multiplier degrees of freedom.
#
split_fields = True
matrix_type = aij
use_custom_constraint_pc = True

[pylithapp.petsc]
# The displacements are solved with algebraic multigrid (ML), and
# the fault tractions with a standard Krylov method since we do not
# explicitly form the Schur complement matrix.
#
fs_pc_type = fieldsplit
fs_pc_use_amat =
fs_pc_fieldsplit_type = multiplicative
fs_fieldsplit_displacement_pc_type = ml
fs_fieldsplit_lagrange_multiplier_pc_type = jacobi
fs_fieldsplit_displacement_ksp_type = preonly
fs_fieldsplit_lagrange_multiplier_ksp_type = preonly


# End of file
