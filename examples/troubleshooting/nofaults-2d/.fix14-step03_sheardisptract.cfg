[pylithapp]
# Simple shear using Dirichlet and Neumann boundary conditions.
#
# We replace the Dirichlet boundary conditions on the +x and +y
# boundaries in step02 with Neumann boundary conditions with uniform
# tangential (shear) tractions.
#
#             --->
#          ----------
#          |        |
#        | |        | ^
#        v |        | |
#          |        |
#          ----------
#             <--
#
# Dirichlet boundary conditions
#
# boundary_xneg: Ux(-6*km,y) = a*y, Uy(-6*km,y) = a*x
# boundary_yneg: Ux(x,-16*km) = a*y, Uy(x,-16*km) = a*x
#
# Neumann boundary conditions
#
# Note that the components are given in terms of the tangential (t = z
# x n) and (outward) normal directions.
#
# boundary_xpos: Tt(+6*km,y) = +b, Tn(+6*km,y) = 0
# boundary_ypos: Tt(x,0) = -b, Tn(x,0) = 0

[pylithapp]
# File with version information and parameters (including defaults).
#
# You can view this file using the pylith_parameters application or
# online at https://geodynamics.github.io/pylith_parameters/.
dump_parameters.filename = output/step03_sheardisptract-parameters.json

# ----------------------------------------------------------------------
# solution
# ----------------------------------------------------------------------
[pylithapp.problem.solution.subfields.displacement]
# The solution has uniform strain, so displacement field is linear, so
# basis order of 1 should give exact solution.
basis_order = 1
quadrature_order = 1

[pylithapp.problem.solution_observers.domain]
writer.filename = output/step03_sheardisptract-domain.h5

# ----------------------------------------------------------------------
# materials
# ----------------------------------------------------------------------
[pylithapp.problem.materials.elastic]
# Set the name of the file for material related output.
observers.observer.writer.filename = output/step03_sheardisptract-elastic.h5

# ----------------------------------------------------------------------
# boundary conditions
# ----------------------------------------------------------------------
[pylithapp.problem]
bc = [x_neg,y_neg,x_pos,y_pos]
bc.x_neg = pylith.bc.DirichletTimeDependent
bc.y_neg = pylith.bc.DirichletTimeDependent
bc.x_pos = pylith.bc.NeumannTimeDependent
bc.y_pos = pylith.bc.NeumannTimeDependent

# Dirichlet boundary conditions
[pylithapp.problem.bc.x_neg]
constrained_dof = [1]
label = boundary_xneg
db_auxiliary_field = spatialdata.spatialdb.SimpleDB
db_auxiliary_field.label = Dirichlet BC -x edge
db_auxiliary_field.iohandler.filename = sheardisp_bc_xneg.spatialdb
db_auxiliary_field.query_type = linear

observers.observer.writer.filename = output/step03_sheardisptract-bc_xneg.h5

[pylithapp.problem.bc.y_neg]
constrained_dof = [0]
label = boundary_yneg
db_auxiliary_field = spatialdata.spatialdb.SimpleDB
db_auxiliary_field.label = Dirichlet BC -y edge
db_auxiliary_field.iohandler.filename = sheardisp_bc_yneg.spatialdb
db_auxiliary_field.query_type = linear

observers.observer.writer.filename = output/step03_sheardisptract-bc_yneg.h5


# Neumann boundary conditions
#
# The tractions are uniform, so we use a UniformDB.
[pylithapp.problem.bc.x_pos]
label = boundary_xpos
use_initial = True
db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.label = Neumann BC +x edge
db_auxiliary_field.values = [initial_amplitude_tangential, initial_amplitude_normal]
db_auxiliary_field.data = [+4.5*MPa, 0*MPa]

observers.observer.writer.filename = output/step03_sheardisptract-bc_xpos.h5

[pylithapp.problem.bc.y_pos]
label = boundary_ypos
use_initial = True
db_auxiliary_field = spatialdata.spatialdb.UniformDB
db_auxiliary_field.label = Neumann BC +y edge
db_auxiliary_field.values = [initial_amplitude_tangential, initial_amplitude_normal]
db_auxiliary_field.data = [-4.5*MPa, 0*MPa]

observers.observer.writer.filename = output/step03_sheardisptract-bc_ypos.h5


# End of file
